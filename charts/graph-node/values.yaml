# Default values for graph-node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: graphprotocol/graph-node
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

config:
  postgres:
    host: postgres
    user: username
    pass: password
    db: graph-node
    port: 5432
    # if DB credentials are stored in existing secret
    existingSecret:
    existingSecretUsernameKey:
    existingSecretPasswordKey:
  ipfs: 'ipfs:5001'
  file: |
    [deployment]
    [[deployment.rule]]
    indexers = [ "default" ]
    shards   = [ "primary" ]
    [chains]
    ingestor = "block_ingestor"
    [chains.sepolia]
    shard    = "primary"
    provider = [{ label = "sepolia-main", url = "https://eth-sepolia.node.localhost", features = []}]
    [store]
    [store.primary]
    connection = "postgresql://${postgres_user}:${postgres_pass}@${postgres_host}/${postgres_db}"
    weight = 1
    pool_size = 10

env:
  GRAPH_LOG: info
  GRAPH_ETHEREUM_CLEANUP_BLOCKS: 'true'

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP

resources:
  limits:
    cpu: "1"
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 256Mi

volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
