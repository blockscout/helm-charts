# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/blockscout/multichain-aggregator
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

config:
  tracing:
    enabled: true
    format: json
  databaseUrl: postgres://user:password@hostname/database_name
  metrics:
    enabled: false
    port: 6060
    prometheus:
      enabled: false
env: []
  # NAME: VALUE
envFromSecret: []
  # NAME: VALUE

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8050

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 250m
    memory: 512Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

frontend:
  enabled: false
  image:
    repository: ghcr.io/blockscout/multichain-search-frontend
    pullPolicy: IfNotPresent
    tag: "latest"
  replicaCount: 1
  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3000
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
  readinessProbe:
    httpGet:
      path: /healthz
      port: http
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
stats:
  enabled: false
  ## Image parametes
  ##
  image:
    repository: ghcr.io/blockscout/stats
    tag: v2.4.0
    pullPolicy: IfNotPresent

  replicaCount: 1
  service:
    type: ClusterIP
    port: 80
    metricsPort: 6060

  podAnnotations: {}

  ## Annotations to add to stats deployment
  annotations: {}

  podSecurityContext: {}

  securityContext: {}

  basePath: "/"

  ## Configure ingress resource that allow you to access the stats installation.
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hostname: chart-example-stats.local
    tls:
      enabled: false
      #secretName:
    paths:
      - path: /
        pathType: Prefix

  resources:
    limits:
      memory: "512Mi"
      cpu: 250m
    requests:
      memory: 512Mi
      cpu: 250m
  ## Files to mount to stats pod
  ##
  files:
    enabled: false
    list: {}
      # file.txt: |
      #   test
    mountPath: /tmp/path

  ## Liveness probe
  ##
  livenessProbe:
    enabled: true
    path: /health
    params:
      initialDelaySeconds: 100
      periodSeconds: 100
      timeoutSeconds: 30
  ## Readiness probe
  ##
  readinessProbe:
    enabled: true
    path: /health
    params:
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 60
  ## Stats ENV vars
  ## ref: https://github.com/blockscout/blockscout-rs/tree/main/stats#env
  env: []
    # NAME: VALUE
  envFromSecret: []
    # NAME: VALUE
  extraEnv: []
    # - name: STATS__DB_URL
    #   valueFrom:
    #     secretKeyRef:
    #       name: blockscout-stats-secret
    #       key: STATS__DB_URL

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
